spring.application.name=currency-exchange-service-v2
server.port=8000
spring.config.import=optional:configserver:http://localhost:8888
spring.mvc.log-request-details=true
logging.level.org.springframework=debug
logging.file.name=D:/OneDrive/Study/Java/Logs/MicroservicesV2.log

# DB Configurations 
spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.h2.console.enabled=true

# The below two security credentials for DB are optional. Note : Do not use this with the insert query.
#spring.datasource.username=su
#spring.datasource.password=password

# From Spring 2.4 onwards, data insertion into a table( even if it is yet to be created) is the first step. hence to avoid problems ( as we are creatign the table also ) , we will need to defer the insertion
spring.jpa.defer-datasource-initialization=true
# script-based initialization is performed by default only for embedded databases. To always initialize a database using scripts, we'll have to us
# Values are always, never, embedded
spring.sql.init.mode=always

# uri of Eureka Naming Server . This is optional and usually addign the eureka client dependency in pom.xml is sufficient
eureka.client.service-url.default-zone=http://localhost:8761/eureka

# when we use containers, the uri of the eureka server will not be localhost. Instead it will be what we have specified in the docker-compose.yaml file viz. 'naming-server'. However this is not required if we configure environment variable in our doker-compose.yaml file 
# eureka.client.service-url.default-zone=http://naming-server:8761/eureka



# Circuit Breaker Resilience configuration  -> Retry for 5 times
# resilience4j.retry.instances.sample-api.max-attempts=5  
# Optional Circuit Breaker Resilience configuration  -> Retry interval is 1 second
# resilience4j.retry.instances.sample-api.wait-duration=1s  
# Optional Circuit Breaker Resilience configuration  -> Exponential Backoff ; Each subesequent request will wait a little longer 
# resilience4j.retry.instances.sample-api.enable-exponential-backoff=true 

# Refer: https://resilience4j.readme.io/docs/circuitbreaker for more configuration options 
# Configure failure percentage
# resilience4j.circuitbreaker.instances.sample-api.failure-rate-threshold=90 

# Allow only 2 requests per 10 seconds
# resilience4j.ratelimiter.instances.sample-api.limit-refresh-period=10s
# resilience4j.ratelimiter.instances.sample-api.limit-for-period=2

# Allow only 10 concurrent calls 
# resilience4j.bulkhead.instances.sample-api.max-concurrent-calls=10

#Configure sampling for Sleuth
# here we have configured to sample every request. If we need to sampel only 5 % of requests, teh value will be 0.05
spring.sleuth.sampler.probability=1.0 


#Specify Zipkin url. Since we are using the default Zipkin url, it is not needed to specify this here. But if we expose it on any other port. we woudl need to specify it as below
spring.zipkin.base-url= http://localhost:9411/

#Configure for rabbit to connect to zipkin
# Since we have configured this directly in dockercompose, this is commented out here as else it will always need rabbit to start as not a container
spring.zipkin.baseUrl=http://localhost:9411/
spring.zipkin.sender.type=rabbit

# Other optional DB/H2 configurations for older spring boot versions
#spring.datasource.driverClassName=org.h2.Driver
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.datasource.data=classpath:/data.sql
#spring.datasource.initialization-mode=always




